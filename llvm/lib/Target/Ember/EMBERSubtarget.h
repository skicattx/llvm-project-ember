//===-- EMBERSubtarget.h - Define Subtarget for the EMBER ---------*- C++ -*-===//
//
// Copyright (c) 2021 IARI Ventures, LLC. All rights reserved.
//
//===----------------------------------------------------------------------===//
//
// This file declares the EMBER specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_EMBER_EMBERSUBTARGET_H
#define LLVM_LIB_TARGET_EMBER_EMBERSUBTARGET_H

//#include "MCTargetDesc/EMBERABIInfo.h"
#include "EMBERFrameLowering.h"
// #include "EMBERISelLowering.h"
#include "EMBERInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/CodeGen/GlobalISel/CallLowering.h"
#include "llvm/CodeGen/GlobalISel/LegalizerInfo.h"
//#include "llvm/CodeGen/GlobalISel/RegisterBankInfo.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/Support/ErrorHandling.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "EMBERGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class EMBERTargetMachine;

class EMBERSubtarget : public EMBERGenSubtargetInfo
{
  virtual void anchor();

  enum EMBERArchEnum {
    EMBERDefault,
    EMBER32
  };

  enum class CPU { Ember};

  /// The minimum alignment known to hold of the stack frame on
  /// entry to the function and which must be maintained by every function.
  Align stackAlignment;

  /// The overridden stack alignment.
  MaybeAlign StackAlignOverride;

  InstrItineraryData InstrItins;

  // We can override the determination of whether we are in EMBER16 mode
  // as from the command line
  enum {NoOverride, EMBER16Override, NoEMBER16Override} OverrideMode;

  const EMBERTargetMachine &TM;

  Triple TargetTriple;

  const SelectionDAGTargetInfo TSInfo;
  std::unique_ptr<const EMBERInstrInfo> InstrInfo;
  std::unique_ptr<const EMBERFrameLowering> FrameLowering;

public:
  bool isPositionIndependent() const;
  bool enablePostRAScheduler() const override { return false; }
//  void getCriticalPathRCs(RegClassVector &CriticalPathRCs) const override;
  CodeGenOpt::Level getOptLevelToEnablePostRAScheduler() const override;

  /// This constructor initializes the data members to match that
  /// of the specified triple.
  EMBERSubtarget(const Triple &TT, StringRef CPU, StringRef FS, const EMBERTargetMachine &TM);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  bool hasEMBER32() const {
    return true;
  }

  bool isLittle() const { return true; }

  Align getStackAlignment() const { return stackAlignment; }

  // Grab relocation model
  Reloc::Model getRelocationModel() const;

  EMBERSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                 const TargetMachine &TM);

  // Set helper classes
  void setHelperClassesEMBER16();
  void setHelperClassesEMBERSE();

  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const EMBERInstrInfo *getInstrInfo() const override { return InstrInfo.get(); }
  const TargetFrameLowering *getFrameLowering() const override {
    return FrameLowering.get();
  }
  const EMBERRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo->getRegisterInfo();
  }

  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }

protected:
  // GlobalISel related APIs.
  std::unique_ptr<CallLowering> CallLoweringInfo;
  std::unique_ptr<LegalizerInfo> Legalizer;
  std::unique_ptr<RegisterBankInfo> RegBankInfo;
  std::unique_ptr<InstructionSelector> InstSelector;

public:
  const CallLowering *getCallLowering() const override;
  const LegalizerInfo *getLegalizerInfo() const override;
  const RegisterBankInfo *getRegBankInfo() const override;
  InstructionSelector *getInstructionSelector() const override;
};
} // End llvm namespace

#endif
